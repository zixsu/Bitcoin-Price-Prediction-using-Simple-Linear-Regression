# -*- coding: utf-8 -*-
"""bitcoin_price_prediction_using_SLRipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PBCDGjIlHcvkDCVghl_IuNVAVSbMJbMd
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('/content/Bitcoin_10K.csv')

df=pd.DataFrame(data)

df.info()

df.describe()

df.isnull().sum()

df.dtypes

df.duplicated().sum()

df = df[['volume', 'number_of_trades']]

print(df)

df

df['number_of_trades']=df['number_of_trades'].astype(float)

df



df = df.head(9000)

import numpy as np
X= data['volume'].values
y= data['number_of_trades'].values

y

import numpy as np
from sklearn.model_selection import train_test_split # Importing the train_test_split function

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)

# Normalize the data for gradient descent
X_train_normalized = (X_train - np.mean(X_train)) / np.std(X_train)
X_test_normalized = (X_test - np.mean(X_train)) / np.std(X_train)

m = 0  # Slope
b = 0  # Intercept
learning_rate = 0.01
epochs = 500

# Gradient Descent
for epoch in range(epochs):
    # Predictions
    y_pred = m * X_train_normalized + b

    # Compute gradients
    dm = -2 * np.sum((y_train - y_pred) * X_train_normalized) / len(X_train)
    db = -2 * np.sum(y_train - y_pred) / len(X_train)

    # Update parameters
    m -= learning_rate * dm
    b -= learning_rate * db

# Model Evaluation on Test Data
y_test_pred = m * X_test_normalized + b

# Calculate R-squared
def r_squared(y_actual, y_predicted):
    ss_res = np.sum((y_actual - y_predicted) ** 2)  # Residual sum of squares
    ss_tot = np.sum((y_actual - np.mean(y_actual)) ** 2)  # Total sum of squares
    return 1 - (ss_res / ss_tot)

r2_score = r_squared(y_test, y_test_pred)
print(f"R-squared: {r2_score:.2f}")

# Plot Results
plt.scatter(X_train, y_train, label='Training Data', color='blue')
plt.scatter(X_test, y_test, label='Testing Data', color='green')
plt.plot(X_test, y_test_pred, label='Prediction Line', color='red')
plt.xlabel('volume')
plt.ylabel('number_of_trades')
plt.legend()
plt.title('Simple Linear Regression')
plt.show()

"""example basic code used  below code refers to"""